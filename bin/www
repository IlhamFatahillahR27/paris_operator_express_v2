#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('paris-operator-express-v2:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Get host from environment and store in Express.
 */

var host = process.env.HOST || 'localhost';

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Setup socket.io server
 */
var io = require('socket.io')(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  }
});
var Tail = require('tail').Tail;
var fs = require('fs');

const today = new Date();
const year = today.getFullYear();
const month = String(today.getMonth() + 1).padStart(2, "0");
const day = String(today.getDate()).padStart(2, "0");
const logFile = `./logs/express_${year}-${month}-${day}.log`;
const logsDir = './logs/';

if (!fs.existsSync(logsDir)) {
  fs.mkdirSync(logsDir, { recursive: true });
}

// Pastikan file log ada dan tidak kosong
if (!fs.existsSync(logFile)) {
  fs.writeFileSync(logFile, '', { flag: 'w' });
}

const tail = new Tail(logFile);

io.on('connection', (socket) => {
  console.log('Client connected');

  fs.readFile(logFile, 'utf8', (err, data) => {
    if (err) {
      console.error('Error reading log file:', err);
      return;
    }
    socket.emit('log_update', data);
  });

  tail.on("line", (data) => {
    socket.emit('log_update', data);
  });

  socket.on('disconnect', () => {
    console.log('Client disconnected');
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, host, function() {
  console.log('Express server running at http://' + host + ':' + port);
});
server.on('error', onError);
server.on('listening', onListening);

// Set server timeout to prevent CLOSE_WAIT accumulation
server.setTimeout(30000); // 30 seconds

// Handle connection close events
server.on('connection', (socket) => {
  socket.on('close', () => {
    console.log('Connection closed');
  });
  socket.on('error', (err) => {
    console.error('Socket error:', err);
  });
});

/**
 * Graceful shutdown handling to prevent CLOSE_WAIT issues
 */
process.on('SIGINT', () => {
  console.log('Received SIGINT. Gracefully shutting down.');
  if (tail) tail.unwatch();
  io.close();
  server.close((err) => {
    if (err) {
      console.error('Error closing server:', err);
      process.exit(1);
    }
    console.log('Server closed.');
    process.exit(0);
  });
});

process.on('SIGTERM', () => {
  console.log('Received SIGTERM. Gracefully shutting down.');
  if (tail) tail.unwatch();
  io.close();
  server.close((err) => {
    if (err) {
      console.error('Error closing server:', err);
      process.exit(1);
    }
    console.log('Server closed.');
    process.exit(0);
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
